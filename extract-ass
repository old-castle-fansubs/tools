#!/usr/bin/env python3
import argparse
import json
import re
import sys
import typing as T
from pathlib import Path
from subprocess import run


class ExtractionError(Exception):
    pass


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    parser.add_argument("source", type=Path)
    parser.add_argument("-o", "--output", type=Path)
    return parser.parse_args()


def extract_track(source_path: Path, track_id: int) -> bytes:
    result = run(
        [
            "mkvextract",
            "tracks",
            "-r",
            "/dev/null",
            source_path,
            f"{track_id}:/dev/stdout",
        ],
        capture_output=True,
        check=True,
    )
    return result.stdout


def get_info(source_path: Path) -> T.Any:
    result = run(
        ["mkvmerge", "-J", source_path],
        check=True,
        capture_output=True,
        text=True,
    )
    return json.loads(result.stdout)


def extract_subtitles(source_path: Path, output_path: Path) -> str:
    info = get_info(source_path)
    ass_track_ids = [
        track["id"] for track in info["tracks"] if track["type"] == "subtitles"
    ]
    if not ass_track_ids:
        raise ExtractionError(f'no subtitles found in "{source_path}"')
    ass = extract_track(source_path, ass_track_ids[0]).decode()
    if str(output_path) == "-":
        print(ass, end="")
    else:
        output_path.write_text(ass)


def check_deps() -> None:
    progs = ["mkvmerge", "mkvextract"]
    for prog in progs:
        try:
            run([prog, "-h"], check=True, capture_output=True, text=True)
        except FileNotFoundError:
            raise ExtractionError(
                "please install mkvtoolnix before running this script"
            )


def main() -> None:
    check_deps()
    args = parse_args()
    extract_subtitles(args.source, args.output or Path("-"))


if __name__ == "__main__":
    try:
        main()
    except ExtractionError as ex:
        print(str(ex).capitalize() + ".", file=sys.stderr)
