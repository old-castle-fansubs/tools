#!/usr/bin/env python3
import argparse
import sys
from copy import copy
from pathlib import Path
from subprocess import PIPE, run

import lxml.etree
from bubblesub.ass.event import Event
from bubblesub.ass.file import AssFile
from bubblesub.ass.reader import read_ass
from bubblesub.ass.writer import write_ass
from bubblesub.util import str_to_ms

VIDEO_EXTENSIONS = {".mkv", ".mp4"}
ASS_EXTENSIONS = {".ass"}


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("source", type=Path, nargs="+")
    parser.add_argument(
        "-C",
        "--no-chapters",
        dest="copy_chapters",
        action="store_false",
        help="don't copy any chapters from video files",
    )
    parser.add_argument(
        "-S",
        "--no-styles",
        dest="copy_styles",
        action="store_false",
        help="don't copy any styles from subtitle files",
    )
    parser.add_argument(
        "-E",
        "--no-events",
        dest="copy_events",
        action="store_false",
        help="don't copy any events from subtitle files",
    )
    return parser.parse_args()


def extract_chapters(source_path):
    out = run(["mkvextract", source_path, "chapters", "-"], stdout=PIPE).stdout
    if not out:
        return

    try:
        xml = lxml.etree.XML(out)
    except lxml.etree.XMLSyntaxError:
        print(
            f'Warning: no chapters found in "{source_path}"', file=sys.stderr
        )
        return

    for chapter_atom in xml.xpath("//ChapterAtom"):
        title = chapter_atom.xpath("string(.//ChapterString)")
        start = chapter_atom.xpath("string(.//ChapterTimeStart)")
        end = chapter_atom.xpath("string(.//ChapterTimeEnd)")
        yield Event(
            start=str_to_ms(start),
            end=str_to_ms(start),
            text=title,
            actor="[chapter]",
            is_comment=True,
        )


def main():
    args = parse_args()

    ass_file = AssFile()
    for source in args.source:
        if not source.exists():
            raise RuntimeError(f'File "{source}" does not exist.')

        if source.suffix in VIDEO_EXTENSIONS:
            ass_file.info.update(
                {"Video File": str(source), "Audio File": str(source)}
            )
            if ass_file.info.get("PlayResY") is None:
                ass_file.info.set("PlayResY", 288)

            if args.copy_chapters:
                for event in extract_chapters(source):
                    ass_file.events.insert(len(ass_file.events), [event])

        elif source.suffix in ASS_EXTENSIONS:
            other_ass_file = read_ass(source)
            ass_file.info.update(other_ass_file.info.items())

            if args.copy_events:
                for event in other_ass_file.events:
                    if event.style.lower().startswith(
                        ("opening", "ending", "op", "ed", "lyrics", "karaoke")
                    ) or event.actor.startswith("["):
                        ass_file.events.append(copy(event))

            if args.copy_styles:
                ass_file.styles.clear()
                for style in other_ass_file.styles:
                    ass_file.styles.append(copy(style))

        else:
            raise RuntimeError(f'Don\'t know what to do with "{source}".')

    write_ass(ass_file, sys.stdout)


if __name__ == "__main__":
    try:
        main()
    except RuntimeError as ex:
        print(ex, file=sys.stderr)
