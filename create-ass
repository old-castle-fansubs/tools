#!/usr/bin/env python3
import argparse
import re
import sys
from pathlib import Path
from subprocess import run, PIPE

import lxml.etree
import pysubs2


VIDEO_EXTENSIONS = {'.mkv', '.mp4'}
NOTICE = 'Script generated by bubblesub\nhttps://github.com/rr-/bubblesub'


def str_to_ms(text):
    result = re.match('''
        ^(?P<sign>[+-])?
        (?:(?P<hour>\\d+):)?
        (?P<minute>\\d\\d):
        (?P<second>\\d\\d)\\.
        (?P<millisecond>\\d+)$''', text.strip(), re.VERBOSE)

    if result:
        sign = result.group('sign')
        hour = int(result.group('hour'))
        minute = int(result.group('minute'))
        second = int(result.group('second'))
        millisecond = int(float('0.' + result.group('millisecond')) * 1000)
        ret = ((((hour * 60) + minute) * 60) + second) * 1000 + millisecond
        if sign == '-':
            ret = -ret
        return ret
    raise ValueError(f'Invalid time "{text}"')


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('source', type=Path, nargs='+')
    return parser.parse_args()


def extract_chapters(source_path):
    out = run(['mkvextract', source_path, 'chapters', '-'], stdout=PIPE).stdout
    xml = lxml.etree.XML(out)
    for chapter_atom in xml.xpath('//ChapterAtom'):
        title = chapter_atom.xpath('string(.//ChapterString)')
        start = chapter_atom.xpath('string(.//ChapterTimeStart)')
        end = chapter_atom.xpath('string(.//ChapterTimeEnd)')
        yield pysubs2.SSAEvent(
            start=str_to_ms(start),
            end=str_to_ms(end),
            text=title,
            name='Chapter',
            type='Comment')


def main():
    args = parse_args()

    file = pysubs2.SSAFile()
    del file.info['Collisions']

    for source in args.source:
        if not source.exists():
            raise RuntimeError(f'File "{source}" does not exist.')

        if source.suffix in VIDEO_EXTENSIONS:
            file.aegisub_project['Audio File'] = \
                file.aegisub_project['Video File'] = str(source)
            for event in extract_chapters(source):
                file.append(event)
            file.info['PlayResY'] = 288
            continue

        raise RuntimeError(f'Don\'t know what to do with "{source}".')

    for event in file:
        event.text = f'{{TIME:{event.start}:{event.end}}}{event.text}'

    print(file.to_string(header_notice=NOTICE, format_='ass'), end='')


if __name__ == '__main__':
    try:
        main()
    except RuntimeError as ex:
        print(ex, file=sys.stderr)
