#!/usr/bin/python3
import os
import re
import subprocess
import argparse
import zlib
from pathlib import Path


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('ep')
    parser.add_argument('-v', '--version', type=int, default=1)
    return parser.parse_args()


def scan(directory):
    for entry in os.scandir(os.path.realpath(os.path.expanduser(directory))):
        if entry.is_file():
            yield entry.path
        elif entry.is_dir():
            for item in scan(entry.path):
                yield item


def get(paths, regex):
    for path in paths:
        if re.match(regex, path, re.I):
            return path
    return None


def get_many(paths, regex):
    for path in paths:
        if re.match(regex, path, re.I):
            yield path


def mux(video_path, subs_path, chapters_path, font_paths, output_path):
    mux_args = ['mkvmerge', '-o', output_path, video_path]

    if subs_path:
        mux_args.extend([subs_path])

    if chapters_path:
        mux_args.extend(['--chapters', chapters_path])

    for font_path in font_paths:
        mux_args.extend([
            '--attachment-mime-type', 'application/x-truetype-font',
            '--attach-file', font_path
        ])

    status = subprocess.run(mux_args)
    if status.returncode != 0:
        raise RuntimeError('Error while muxing')


def get_checksum(path):
    with open(path, 'rb') as handle:
        return zlib.crc32(handle.read()) & 0xFFFFFFFF


def main():
    args = parse_args()
    episode = args.ep
    version = args.version

    files = list(scan('.'))

    series = os.path.basename(os.getcwd())
    subs_file = Path('%s.ass' % episode)
    video_file = next(p for p in Path('source').iterdir() if p.stem == episode)
    chapters_file = Path('chapters/%s.txt' % episode)
    font_files = [p for p in Path('fonts').iterdir()]

    if not subs_file.exists():
        raise RuntimeError('No subs file found')
    if not chapters_file.exists():
        raise RuntimeError('No chapters found')
    if not video_file:
        raise RuntimeError('No video file found')
    if not font_files:
        raise RuntimeError('No fonts found')

    desired_checksum = (
        (get_checksum(video_file) & 0xFFFF0000)
        | (version << 12)
        | int(episode))
    output_file = Path('muxed/[OldCastle] %s - %s [%08X].mkv' % (
        series, episode, desired_checksum))

    mux(video_file, subs_file, chapters_file, font_files, 'tmp.mkv')

    status = subprocess.run([
        'crcmanip', 'patch', 'tmp.mkv', 'tmp2.mkv', '%08x' % desired_checksum])
    if status.returncode != 0:
        raise RuntimeError('Error while patching CRC')

    print('%08x' % get_checksum('tmp2.mkv'))

    os.unlink('tmp.mkv')
    os.rename('tmp2.mkv', output_file)


if __name__ == '__main__':
    main()
