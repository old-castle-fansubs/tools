#!/usr/bin/env python3.8
import argparse
import difflib
import re
import sys
import typing as T
from dataclasses import dataclass
from pathlib import Path

import git  # python3 -m pip install --user gitpython

from bubblesub.fmt.ass.event import AssEvent
from bubblesub.fmt.ass.file import AssFile
from bubblesub.fmt.ass.reader import read_ass


def first(source: T.Iterable[T.Any]) -> T.Any:
    return next(source, None)


def last(source: T.Iterable[T.Any]) -> T.Any:
    item = None
    for item in source:
        pass
    return item


class BaseChange:
    @property
    def sort_key(self) -> T.Any:
        raise NotImplementedError('not implemented')


@dataclass
class LineRemovedChange(BaseChange):
    event: AssEvent

    @property
    def sort_key(self) -> T.Any:
        return self.event.number

    def __str__(self) -> str:
        return (
            f"Line #{self.event.number}\n"
            f"    {self.event.text} →"
            f"\n    Removed\n"
        )


@dataclass
class LineChangedTextChange(BaseChange):
    old_event: AssEvent
    new_event: AssEvent

    @property
    def sort_key(self) -> T.Any:
        return self.old_event.number

    def __str__(self) -> str:
        return (
            f"Line #{self.old_event.number}\n"
            f"    {self.old_event.text} →\n"
            f"    {self.new_event.text}\n"
        )


@dataclass
class LineChangedTimeChange(BaseChange):
    old_event: AssEvent
    new_event: AssEvent

    @property
    def sort_key(self) -> T.Any:
        return self.old_event.number

    def __str__(self) -> str:
        return f"Line #{self.old_event.number}\n    Fixed timing\n"


@dataclass
class LineAddedChange(BaseChange):
    after_event: AssEvent
    before_event: AssEvent
    new_event: AssEvent

    @property
    def sort_key(self) -> T.Any:
        return self.after_event.number

    def __str__(self) -> str:
        return (
            f"Between line #{self.after_event.number} "
            f"and #{self.before_event.number}\n"
            f"    Missing line →\n"
            f"    {self.new_event.text}\n"
        )


def parse_args() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument("commit", default="HEAD", nargs="?")
    parser.add_argument(
        "-n",
        action="store_true",
        dest="keep_newlines",
        help="don't convert newlines"
    )
    return parser.parse_args()


def collect_changes(a_ass: AssFile, b_ass: AssFile) -> T.Iterable[BaseChange]:
    handled_b_events: T.Set[AssEvent] = set()

    for event1 in a_ass.events:
        if event2 := first(
            e
            for e in b_ass.events
            if event1.text == e.text
            and event1.start == e.start
            and event1.end == e.end
            and event1.style == e.style
        ):
            pass

        elif event2 := first(
            e
            for e in b_ass.events
            if (
                event1.text == e.text
                and event1.style == e.style
                and (event1.start != e.start or event1.end != e.end)
            )
        ):
            yield LineChangedTimeChange(event1, event2)

        elif event2 := first(
            e
            for e in b_ass.events
            if (
                event1.start == e.start
                and event1.end == e.end
                and event1.style == e.style
                and event1.text != e.text
            )
        ):
            yield LineChangedTextChange(event1, event2)

        else:
            yield LineRemovedChange(event1)

        if event2:
            handled_b_events.add(event2)

    sorted_a_events = list(sorted(a_ass.events, key=lambda e: e.start))
    for event2 in b_ass.events:
        if event2 in handled_b_events:
            continue
        event1a = last(e for e in sorted_a_events if e.start < event2.start)
        event1b = first(e for e in sorted_a_events if e.start >= event2.start)
        yield LineAddedChange(event1a, event1b, event2)


def ass_postprocess(ass_file: AssFile, args: argparse.Namespace) -> None:
    if not args.keep_newlines:
        for event in ass_file.events:
            event.text = event.text.replace(r"\N", " ")


def main() -> None:
    args = parse_args()
    repo = git.Repo(search_parent_directories=True)

    commit1 = repo.commit(args.commit + "^")
    commit2 = repo.commit(args.commit)
    diff_index = commit1.diff(commit2)

    for diff_item in diff_index.iter_change_type("M"):
        if not all(
            [
                diff_item.a_blob.path.endswith(".ass"),
                diff_item.b_blob.path.endswith(".ass"),
            ]
        ):
            continue

        ep_number = int(
            re.search(r'(\d+)', Path(diff_item.a_path).name).group(1)
        )
        header = f'Episode {ep_number:02d}'
        print(header)
        print('-' * len(header))
        print()

        a_blob = diff_item.a_blob.data_stream.read().decode("utf-8")
        b_blob = diff_item.b_blob.data_stream.read().decode("utf-8")

        a_ass = read_ass(a_blob)
        b_ass = read_ass(b_blob)
        ass_postprocess(a_ass, args)
        ass_postprocess(b_ass, args)

        for change in sorted(
            collect_changes(a_ass, b_ass), key=lambda change: change.sort_key
        ):
            print(change)


if __name__ == "__main__":
    main()
